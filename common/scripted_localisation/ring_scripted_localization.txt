##### TODO: unfinished

defined_text = {
	name = DisplayRingEventLog
	text = {
		trigger = {
			# upper limit for lines in event-log
			# NOTE: There is a recursion-depth limit to this, please ensure that global.fs_eventlog^num is always under a certain number
			# You can use ring_trim_eventlog = yes (whenever you add to the eventlog) for this.
			check_variable = { temp_event_index < global.fs_eventlog^num }

			if = {
				limit = { has_variable = temp_event_index }
				add_to_temp_variable = { temp_event_index = 1 }
			}
			else = {
				set_temp_variable = { temp_event_index = 0 }
			}
		}
		localization_key = "ring_event_log_recruse"
	}
}



defined_text = {
	name = DisplayRingEvent
	text = {
		trigger = {
			check_variable = { global.fs_eventlog^temp_event_index = token:fs_event_char_takes_damage }
		}
		localization_key = "[?global.fs_eventlog_prefix_targets^temp_event_index.GetName] [?global.fs_eventlog^temp_event_index.GetTokenLocalizedKey][?global.fs_eventlog_suffix_targets^temp_event_index] damage."
	}
	text = {
		trigger = {
			check_variable = { global.fs_eventlog^temp_event_index = token:fs_event_tries_to_intercept }
		}
		localization_key = "[?global.fs_eventlog_prefix_targets^temp_event_index.GetNameWithFlag] [?global.fs_eventlog^temp_event_index.GetTokenLocalizedKey][?global.fs_eventlog_suffix_targets^temp_event_index.GetName]."
	}
	text = {
		trigger = {
			check_variable = { global.fs_eventlog^num > temp_event_index }
			NOT = { check_variable = { global.fs_eventlog_prefix_targets^temp_event_index = 0 } }
			NOT = { check_variable = { global.fs_eventlog_suffix_targets^temp_event_index = 0 } }
		}
		localization_key = "[?global.fs_eventlog_prefix_targets^temp_event_index.GetName] [?global.fs_eventlog^temp_event_index.GetTokenLocalizedKey] [?global.fs_eventlog_suffix_targets^temp_event_index.GetName]."
	}
	text = {
		trigger = {
			check_variable = { global.fs_eventlog^num > temp_event_index }
			NOT = { check_variable = { global.fs_eventlog_prefix_targets^temp_event_index = 0 } }
		}
		localization_key = "[?global.fs_eventlog_prefix_targets^temp_event_index.GetName] [?global.fs_eventlog^temp_event_index.GetTokenLocalizedKey]."
	}
	text = {
		trigger = {
			check_variable = { global.fs_eventlog^num > temp_event_index }
			NOT = { check_variable = { global.fs_eventlog_suffix_targets^temp_event_index = 0 } }
		}
		localization_key = "[?global.fs_eventlog^temp_event_index.GetTokenLocalizedKey] [?global.fs_eventlog_suffix_targets^temp_event_index.GetName]."
	}
	text = {
		trigger = {
			check_variable = { global.fs_eventlog^num > temp_event_index }
		}
		localization_key = "[?global.fs_eventlog^temp_event_index.GetTokenLocalizedKey]."
	}
}



defined_text = {
	name = DisplayHuntingParty
	text = {
		trigger = {
			check_variable = { temp_index < 10 } # upper limit for lines in event-log
			check_variable = { temp_index < ROOT.fs_hunting_party^num }

			if = {
				limit = { has_variable = temp_index }
				add_to_temp_variable = { temp_index = 1 }
			}
			else = {
				set_temp_variable = { temp_index = 0 }
			}
		}
		localization_key = "ring_hunting_party_recruse"
	}
}

defined_text = {
	name = GetHP
	text = {
		trigger = {
			always = yes
		}
		localization_key = "[GetHPSymbol] [?health]/[?defense_level]"
	}
}

defined_text = {
	name = GetHPSymbol
	text = {
		trigger = {
			always = yes
		}
		localization_key = "fs_hp_symbol"
	}
}

defined_text = {
	name = GetAD
	text = {
		trigger = {
			always = yes
		}
		localization_key = "[GetADSymbol] [?attack_level]"
	}
}

defined_text = {
	name = GetADSymbol
	text = {
		trigger = {
			always = yes
		}
		localization_key = "fs_ad_symbol"
	}
}

defined_text = {
	name = GetDEX
	text = {
		trigger = {
			always = yes
		}
		localization_key = "[GetDEXSymbol] [?logistics_level]"
	}
}

defined_text = {
	name = GetDEXSymbol
	text = {
		trigger = {
			always = yes
		}
		localization_key = "fs_dex_symbol"
	}
}

defined_text = {
	name = GetSTEALTH
	text = {
		trigger = {
			always = yes
		}
		localization_key = "[GetSTEALTHSymbol] [?planning_level]"
	}
}

defined_text = {
	name = GetSTEALTHSymbol
	text = {
		trigger = {
			always = yes
		}
		localization_key = "fs_stealth_symbol"
	}
}